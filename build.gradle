buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/'}
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "idea"
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'org.spongepowered.mixin'


group = mod_group_id
version = mod_version

System.setProperty("MC_VERSION", minecraft_version)

java {
    archivesBaseName = "$mod_name-$minecraft_version"
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}
minecraft {

    mappings channel: mapping_channel, version: mapping_version

    enableIdeaPrepareRuns = true

    copyIdeResources = true

    generateRunFolders = true

    runs {

        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            arg '-torg.spongepowered.asm.launch.MixinTweaker'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        configureEach {

            property 'forge.logging.markers', 'REGISTRIES'



            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }


        server {
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}



sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
    flatDir{
        dir 'libs'
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties


    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

}


dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("mod.flatcoloredblocks:flatcoloredblocks-revived:mc1.16.5-1.0")
    implementation fg.deobf('com.ldtteam:chiselsandbits:0.3.6-hotfix')
    compileOnly fg.deobf('net.optifine:optifine:1.16.5')

    annotationProcessor 'org.spongepowered:mixin:0.8.3-SNAPSHOT:processor'
    implementation('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }

}

mixin {
    add sourceSets.main, 'refmap.cob.json'
    config 'cob.mixins.json'
}

jar {
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
